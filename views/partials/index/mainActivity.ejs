<!-- <div id="company_information"> -->
    <div class="wrapper">
        <div class="hot one grid-item">
            <!-- <label for="open_branches" class="label_top">Open Branches</label> -->
            <div id="open_branches" class="company_info"><p>Open Branches: </br><%- data.branches %></p></div>
        </div>
        <div class="hot two grid-item">
            <!-- <label for="avg_handle_time" class="label_top">Avg Treatmnt Time </label> -->
            <div id="avg_handle_time" class="company_info"><p>Avg Treatmnt Time: </br><%- (Math.round(data.avg * 100) / 100).toFixed(2); %></p></div>
        </div>
        <div class="hot three grid-item">
            <!-- <label for="orders_inprog" class="label_top">Orders In Progress</label> -->
            <div id="orders_inprog" class="company_info"><p>Orders In Progress</br> <%- data.open_orders %></p></div>
        </div>
        <div class="hot four grid-item">
            <!-- <label for="total_orders" class="label_top">Total Orders</label> -->
            <div id="total_orders" class="company_info "><p>Total Orders: </br> <%- data.total %></p></div>
        </div>
    </div>
<!-- </div> -->

<div id="metrics" class="wrapper">
    <div class="metric one grid-item">
        <div id="top_5_toppings"></div>
    </div>
    <div class="metric two grid-item">
        <div id="top_5_branch_ordertime"></div>
    </div>
    <div class="metric three grid-item">
        <div id="orders_by_region"></div>
    </div>
    <div class="metric four grid-item">
        <div id="total_orders_during_day"></div>
    </div>
</div>



<script>
    var socket = io('localhost:3000');
    socket.on('update', (data) =>{
        console.log('recieved update')
        document.getElementById("open_branches").firstChild.innerHTML = 'Open Branches: \n' + data.branches;
        document.getElementById("avg_handle_time").firstChild.innerHTML = "Avg Treatmnt Time: \n"+ (Math.round(data.avg * 100) / 100).toFixed(2);
        document.getElementById("orders_inprog").firstChild.innerHTML = "Orders In Progress: \n" +data.open_orders;
        document.getElementById("total_orders").firstChild.innerHTML = "Total Orders: \n" +data.total;
        document.getElementById("time").innerHTML = "Last Updated Date: " + data.time;
        make_horizontal_histogram('top_5_toppings', data.toppings,300);
        make_pie_chart('orders_by_region', data.orders_by_region);
        make_horizontal_histogram('top_5_branch_ordertime', data.avg_duration_per_region, 300);
        make_graph('total_orders_during_day', data.time_order)
    })
</script>
<script>
    const data = JSON.parse('<%- JSON.stringify(data) %>');
    var pie_data = {a: 9, b: 20, c:30, d:8, e:12}
    make_pie_chart('orders_by_region', data.orders_by_region, 'Orders By Region');
    make_horizontal_histogram('top_5_toppings', data.toppings, 300, 'Top 5 Toppings', 'Amount (Units)', 'Topping Types');
    make_horizontal_histogram('top_5_branch_ordertime', data.avg_duration_per_region, 300, 'Top 5 Branch Order Time', 'Avg Order Duration (Seconds)', 'Branch Names' );
    make_graph('total_orders_during_day', data.time_order, 'Total Orders During Day', 'Time (Grouped by hour)','Orders (Units)')

    function make_pie_chart(div, data, name)
    {
        document.getElementById(div).innerHTML = ""
        // set the dimensions and margins of the graph
        var margin1 = 40
        var width= 260, height=260;
        // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.
        var radius = Math.min(width, height) / 2 - margin1

        // append the svg object to the div called 'my_dataviz'
        var svg1 = d3.select("#" + div)
        .append("svg")
        .attr("width", width)
        .attr("height", height)
        .append("g")
        .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

        // Create dummy data
        

        // set the color scale
        var color = d3.scaleOrdinal()
        .domain(data)
        .range(d3.schemeSet2);

        // Compute the position of each group on the pie:
        var pie = d3.pie()
        .value(function(d) {return d.value; })
        var data_ready = pie(d3.entries(data))
        // Now I know that group A goes from 0 degrees to x degrees and so on.

        // shape helper to build arcs:
        var arcGenerator = d3.arc()
        .innerRadius(0)
        .outerRadius(radius)

        // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
        svg1
        .selectAll('mySlices')
        .data(data_ready)
        .enter()
        .append('path')
        .attr('d', arcGenerator)
        .attr('fill', function(d){ return(color(d.data.key)) })
        .attr("stroke", "black")
        .style("stroke-width", "2px")
        .style("opacity", 0.7)

        // Now add the annotation. Use the centroid method to get the best coordinates
        svg1
        .selectAll('mySlices')
        .data(data_ready)
        .enter()
        .append('text')
        .text(function(d){ return d.data.key})
        .attr("transform", function(d) { return "translate(" + arcGenerator.centroid(d) + ")";  })
        .style("text-anchor", "middle")
        .style("font-size", 17)
        
        svg1.append("text")
        .attr("x", 0)             
        .attr("y", 0 - height/2.3)
        .attr("text-anchor", "middle")  
        .style("font-size", "16px") 
        .style("text-decoration", "underline")  
        .text(name);

    }

    function make_vertical_histogram(div)
    {
        
        // set the dimensions and margins of the graph
        var margin = {top: 10, right: 30, bottom: 30, left: 40},
        width = 460 - margin.left - margin.right,
        height = 400 - margin.top - margin.bottom;

        // append the svg object to the body of the page
        var svg = d3.select("#" + div)
        .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
        .append("g")
            .attr("transform",
                "translate(" + margin.left + "," + margin.top + ")");

        // get the data
        d3.csv("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/1_OneNum.csv", function(data) {
        
        // X axis: scale and draw:
        var x = d3.scaleLinear()
            .domain([0, 1000])     // can use this instead of 1000 to have the max of data: d3.max(data, function(d) { return +d.price })
            .range([0, width]);
        svg.append("g")
            .attr("transform", "translate(0," + height + ")")
            .call(d3.axisBottom(x));

        // set the parameters for the histogram
        var histogram = d3.histogram()
            .value(function(d) { return d.price; })   // I need to give the vector of value
            .domain(x.domain())  // then the domain of the graphic
            .thresholds(x.ticks(70)); // then the numbers of bins

        // And apply this function to data to get the bins
        var bins = histogram(data);

        // Y axis: scale and draw:
        var y = d3.scaleLinear()
            .range([height, 0]);
            y.domain([0, d3.max(bins, function(d) { return d.length; })]);   // d3.hist has to be called before the Y axis obviously
        svg.append("g")
            .call(d3.axisLeft(y));

        // append the bar rectangles to the svg element
        svg.selectAll("rect")
            .data(bins)
            .enter()
            .append("rect")
            .attr("x", 1)
            .attr("transform", function(d) { return "translate(" + x(d.x0) + "," + y(d.length) + ")"; })
            .attr("width", function(d) { return x(d.x1) - x(d.x0) -1 ; })
            .attr("height", function(d) { return height - y(d.length); })
            .style("fill", "#69b3a2")

    });
    }

    function make_horizontal_histogram(div,data, range, name, x_title, y_title)
    {
        document.getElementById(div).innerHTML = ""
        var margin = {top: 10, right: 30, bottom: 30, left: 40},
        width = 460 - margin.left - margin.right,
        height = 210 - margin.top - margin.bottom;
        // append the svg object to the body of the page
        var svg2 = d3.select("#" + div)
        .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
        .append("g")
            .attr("transform",
                "translate(" + (+margin.left+15) + "," + margin.top + ")");
        
        // if u want to see the data, form it like this
        // d3.csv("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/7_OneCatOneNum_header.csv", function(data) {
        // console.log(data)
        // })
        // Add X axis
        var x = d3.scaleLinear()
            .domain([0, range])
            .range([ 0, width]);
        svg2.append("g")
            .attr("transform", "translate(0," + height + ")")
            .call(d3.axisBottom(x))
            .selectAll("text")
            .attr("transform", "translate(-10,0)rotate(-45)")
            .style("text-anchor", "end");
        
        // Y axis
        var y = d3.scaleBand()
            .range([ 0, height ])
            .domain(data.map(function(d) { return d.X_Axis; }))
            .padding(.1);
        svg2.append("g")
            .call(d3.axisLeft(y))
            .selectAll("text")
            // .attr("dx", "4em")
            // .attr("dy", '2.5em')
            .attr("transform", "rotate(25)");
        //Bars
        svg2.selectAll("myRect")
            .data(data)
            .enter()
            .append("rect")
            .attr("x", x(0) )
            .attr("y", function(d) { return y(d.X_Axis); })
            .attr("width", function(d) { return x(d.Y_Axis); })
            .attr("height", y.bandwidth() )
            .attr("fill", "#ea5545")
        
        //title
        svg2.append("text")
        .attr("x", (width / 2))             
        .attr("y", 0)
        .attr("text-anchor", "middle")  
        .style("font-size", "16px") 
        .style("text-decoration", "underline")  
        .text(name)
        .attr("dx", "-.8em")
        .attr("dy", ".15em");
        
        // x axis title
        svg2.append("text")
        .attr("class", "x label")
        .attr("text-anchor", "end")
        .attr("x", width)
        .attr("y", height - 6)
        .text(x_title);
        
        // y axis title
        svg2.append("text")
        .attr("class", "y label")
        .attr("text-anchor", "end")
        .attr("y", 6)
        .attr("dy", ".75em")
        .attr("transform", "rotate(-90)")
        .text(y_title);
        
    }
    function make_graph(div, da, name, x_title, y_title)
    {
        var data = da.map((cur, index) =>  {
            var date = new Date()
            date.setHours(cur.X_Axis)
            date.setMinutes(0)
            date.setSeconds(0)
            var o = {
            'X_Axis': date,
            'Y_Axis': cur.Y_Axis }
            return o;
        });
        console.log(data)
        document.getElementById(div).innerHTML = ""
                // set the dimensions and margins of the graph
        var margin = {top: 10, right: 30, bottom: 30, left: 60},
            width = 900 - margin.left - margin.right,
            height = 460 - margin.top - margin.bottom;

        // append the svg object to the body of the page
        var svg = d3.select("#" + div)
        .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
        .append("g")
            .attr("transform",
                "translate(" + margin.left + "," + margin.top + ")");

        //Read the data
        // d3.csv("https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/connectedscatter.csv",
            
            // Add X axis --> it is a date format
            const start_date = new Date()
            start_date.setDate(start_date.getDate() - 1)
            var x = d3.scaleTime()
            .domain([start_date.getTime(), start_date.getTime() + 21 * 60 * 60 * 1000])
            .nice()
            // .domain([new Date(1554236172000), new Date(1554754572000) + 21 * 55 * 60 * 1000])
            // .domain(d3.extent(data, function(d) { return d.X_Axis; }))
            .range([ 0, width ]);
            var xAxis = d3.axisBottom(x)
            .tickFormat(d3.timeFormat("%H:%M"))
            .ticks(24);

            svg.append("g")
            .attr("class", "x axis")
            .attr("transform", "translate(0," + height + ")")
            .call(xAxis)
            .selectAll("text")
            .attr("dx", "-.8em")
            .attr("dy", ".15em")
            .attr("transform", "rotate(-65)");
            // Add Y axis
            var y = d3.scaleLinear()
            .domain( [0, 1000])
            .range([ height, 0 ]);
            svg.append("g")
            .call(d3.axisLeft(y));
            // Add the line
            svg.append("path")
            .datum(data)
            .attr("fill", "none")
            .attr("stroke", "#ea5545")
            .attr("stroke-width", 1.5)
            .attr("d", d3.line()
                .x(function(d) { return x(d.X_Axis) })
                .y(function(d) { return y(d.Y_Axis) })
                )
            // Add the points
            svg
            .append("g")
            .selectAll("dot")
            .data(data)
            .enter()
            .append("circle")
                .attr("cx", function(d) { return x(d.X_Axis) } )
                .attr("cy", function(d) { return y(d.Y_Axis) } )
                .attr("r", 5)
                .attr("fill", "#ea5545")

            svg.append("text")
            .attr("x", (width / 2))             
            .attr("y", 0 )
            .attr("text-anchor", "middle")  
            .style("font-size", "16px") 
            .style("text-decoration", "underline")  
            .text(name)
            .attr("dx", "-.8em")
            .attr("dy", ".15em");

            // x axis title
            svg.append("text")
            .attr("class", "x label")
            .attr("text-anchor", "end")
            .attr("x", width)
            .attr("y", height - 6)
            .text(x_title);
            
            // y axis title
            svg.append("text")
            .attr("class", "y label")
            .attr("text-anchor", "end")
            .attr("y", 6)
            .attr("dy", ".75em")
            .attr("transform", "rotate(-90)")
            .text(y_title);
    }
</script>